"""
License calculation module for scoring models, datasets, and code.
"""

import time
from typing import Any, Dict, Tuple

# A map of Hugging Face's valid license keywords (pulled from here: https://huggingface.co/docs/hub/en/repositories-licenses)
# to scores (scores generated by llama4 along with justifications). I have made some tweaks where I disagreed with the AI output.
license_score_map: dict[str, float] = {
    "apache-2.0": 1.00,  # Very permissive with minimal restrictions and a patent grant.
    "mit": 0.98,  # Extremely permissive with almost no restrictions.
    "bigscience-openrail-m": 0.8,  # Some restrictions on use
    "creativeml-openrail-m": 0.8,  # Some restrictions on use
    "bigscience-bloom-rail-1.0": 0.7,  # Some restrictions on use
    "bigcode-openrail-m": 0.8,  # Some restrictions on use
    "afl-3.0": 0.85,  # Permissive but with some restrictions on derivative works.
    "artistic-2.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "bsl-1.0": 0.85,  # Permissive but with some restrictions on derivative works.
    "bsd": 0.85,  # Similar to BSD-3-Clause but without patent protection.
    "bsd-2-clause": 0.9,  # Very permissive with minimal restrictions.
    "bsd-3-clause": 0.85,  # Permissive but with some restrictions on patent protection.
    "bsd-3-clause-clear": 0.85,  # Similar to BSD-3-Clause but with clearer language.
    "c-uda": 0.6,  # Restricted by NVIDIA's proprietary software requirements.
    "cc0-1.0": 0.99,  # Public domain dedication with no restrictions.
    "cc-by-2.0": 0.7,  # Permissive but requires attribution.
    "cc-by-2.5": 0.7,  # Permissive but requires attribution.
    "cc-by-3.0": 0.7,  # Permissive but requires attribution.
    "cc-by-4.0": 0.7,  # Permissive but requires attribution.
    "cc-by-sa-3.0": 0.5,  # Permissive but requires attribution and same-license derivative works.
    "cc-by-sa-4.0": 0.5,  # Permissive but requires attribution and same-license derivative works.
    "cc-by-nc-2.0": 0.4,  # Restricted to non-commercial use.
    "cc-by-nc-3.0": 0.4,  # Restricted to non-commercial use.
    "cc-by-nc-4.0": 0.4,  # Restricted to non-commercial use.
    "cc-by-nc-sa-2.0": 0.3,  # Restricted to non-commercial use and requires same-license derivative works.
    "cc-by-nc-sa-3.0": 0.3,  # Restricted to non-commercial use and requires same-license derivative works.
    "cc-by-nc-sa-4.0": 0.3,  # Restricted to non-commercial use and requires same-license derivative works.
    "cdla-permissive-1.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "cdla-sharing-1.0": 0.6,  # Permissive but with some restrictions on derivative works.
    "cecill-2.1": 0.7,  # Permissive but with some restrictions on derivative works.
    "cecill-b": 0.7,  # Permissive but with some restrictions on derivative works.
    "cecill-c": 0.7,  # Permissive but with some restrictions on derivative works.
    "ecl-2.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "epl-1.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "epl-2.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "eupl-1.1": 0.7,  # Permissive but with some restrictions on derivative works.
    "eupl-1.2": 0.7,  # Permissive but with some restrictions on derivative works.
    "gpl-2.0": 0.4,  # Copyleft with strong restrictions on derivative works.
    "gpl-3.0": 0.4,  # Copyleft with strong restrictions on derivative works.
    "lgpl-2.1": 0.6,  # Copyleft with some restrictions on derivative works.
    "lgpl-3.0": 0.6,  # Copyleft with some restrictions on derivative works.
    "lppl-1.3c": 0.7,  # Permissive but with some restrictions on derivative works.
    "mpl-2.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "ms-pl": 0.8,  # Permissive but with some restrictions on derivative works.
    "ms-rl": 0.8,  # Permissive but with some restrictions on derivative works.
    "nposl-3.0": 0.7,  # Permissive but with some restrictions on derivative works.
    "odc-by": 0.7,  # Permissive but requires attribution.
    "odbl-1.0": 0.6,  # Permissive but with some restrictions on derivative works.
    "osl-3.0": 0.7,  # Permissive but with some restrictions on derivative works.
    "postgresql": 0.8,  # Permissive but with some restrictions on derivative works.
    "psfl": 0.8,  # Permissive but with some restrictions on derivative works.
    "rpl-1.1": 0.7,  # Permissive but with some restrictions on derivative works.
    "rpl-1.5": 0.7,  # Permissive but with some restrictions on derivative works.
    "rpsl-1.0": 0.7,  # Permissive but with some restrictions on derivative works.
    "spdx": 0.8,  # Permissive but with some restrictions on derivative works.
    "spl-1.0": 0.8,  # Permissive but with some restrictions on derivative works.
    "unlicense": 0.99,  # Public domain dedication with no restrictions.
    "vim": 0.8,  # Permissive but with some restrictions on derivative works.
    "wtfpl": 0.9,  # Very permissive with minimal restrictions.
    "zlib": 0.9,  # Very permissive with minimal restrictions.
    "other": 0.0,  # Unknown or custom license.
    "unknown": 0.0,  # Unknown license.
}


def calculate_license_score_with_timing(data: Dict[str, Any]) -> Tuple[float, int]:
    """
    Calculate license score with latency measurement.

    Args:
        data: Dictionary containing model/dataset data with license information

    Returns:
        tuple of (license_score, latency_ms)
    """
    start_time = time.perf_counter()

    # Extract license from cardData
    license_str = data.get('cardData').get('license') if data.get('cardData') is not None else "unknown"
    if isinstance(license_str, list):
        license_str = license_str[0]

    # Calculate license score
    license_score: float = license_score_map.get(license_str, 0) if (
        license_str is not None and
        license_str != "unknown" and
        license_str != "other"
    ) else 0.0

    end_time = time.perf_counter()
    license_latency = max(10, round((end_time - start_time) * 1000) + 10)  # Add base latency

    return license_score, license_latency


def calculate_license_score(data: Dict[str, Any]) -> float:
    """
    Calculate license score without timing.

    Args:
        data: Dictionary containing model/dataset data with license information

    Returns:
        license score as float
    """
    # Extract license from cardData
    license_str = data.get('cardData').get('license') if data.get('cardData') is not None else "unknown"
    if isinstance(license_str, list):
        license_str = license_str[0]

    # Calculate license score
    license_score: float = license_score_map.get(license_str, 0) if (
        license_str is not None and
        license_str != "unknown" and
        license_str != "other"
    ) else 0.0

    return license_score
