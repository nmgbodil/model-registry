---
openapi: 3.0.2
info:
  title: ECE 461 - Fall 2025 - Project Phase 2
  version: 3.4.2
  description: |-
    API for ECE 461/Fall 2025/Project Phase 2: A Trustworthy Model Registry"

    All endpoints have BASELINE or NON-BASELINE listed. Please read through all descriptions before raising questions.

    An `artifact_id` is a unique identifier for each model/dataset/code entry. (Key idea -> the id is unique for all entities, even when a source reuses the same name).

    Hugging Face models rarely expose formal revision tags, so treat every ingest as a standalone artifact identified solely by its name and generated id.

    Eg.

        model_name: audience-classifier -> artifact_id: 3847247294

        dataset_name: bookcorpus -> artifact_id: 5738291045

        code_name: google-research-bert -> artifact_id: 9182736455

  termsOfService: http://swagger.io/terms/
  contact:
    name: Prof. Davis
    url: http://davisjam.github.io
    email: davisjam@purdue.edu
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /health:
    get:
      summary: "Heartbeat check (BASELINE)"
      description: |-
        Lightweight liveness probe. Returns HTTP 200 when the registry API is reachable.
      operationId: RegistryHealthHeartbeat
      responses:
        "200":
          description: Service reachable.

  /health/components:
    get:
      summary: "Get component health details (NON-BASELINE)"
      description: |-
        Return per-component health diagnostics, including status, active issues, and log references.
        Use this endpoint to power deeper observability dashboards or for incident debugging.
      operationId: RegistryHealthComponents
      parameters:
        - name: windowMinutes
          in: query
          description: "Length of the trailing observation window, in minutes (5-1440). Defaults to 60."
          required: false
          schema:
            type: integer
            minimum: 5
            maximum: 1440
            default: 60
        - name: includeTimeline
          in: query
          description: "Set to true to include per-component activity timelines sampled across the window."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Component-level health detail.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthComponentCollection"

  /artifacts:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ArtifactQuery"
        required: true
      parameters:
        - name: offset
          description:
            "Provide this for pagination. If not provided, returns the first\
            \ page of results."
          schema:
            $ref: "#/components/schemas/EnumerateOffset"
          in: query
          required: false
      responses:
        "200":
          headers:
            offset:
              schema:
                $ref: "#/components/schemas/EnumerateOffset"
              examples:
                ExampleRequest:
                  value: "3"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtifactMetadata"
              examples:
                ExampleResponse:
                  value:
                    - name: audience-classifier
                      id: 3847247294
                      type: model
                    - name: bookcorpus
                      id: 5738291045
                      type: dataset
                    - name: google-research-bert
                      id: 9182736455
                      type: code
          description: List of artifacts
        "400":
          description: "There is missing field(s) in the artifact_query or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "413":
          description: Too many artifacts returned.
      operationId: ArtifactsList
      summary: Get the artifacts from the registry. (BASELINE)
      description: |-
        Get any artifacts fitting the query.
        Search for artifacts satisfying the indicated query.

        If you want to enumerate all artifacts, provide an array with a single artifact_query whose name is "*".

        The response is paginated; the response header includes the offset to use in the next query.
    parameters:
      - name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /reset:
    delete:
      responses:
        "200":
          description: Registry is reset.
        "401":
          description: You do not have permission to reset the registry.
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
      operationId: RegistryReset
      summary: Reset the registry. (BASELINE)
      description: Reset the registry to a system default state.
    parameters:
      - name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /artifacts/{artifact_type}/{id}:
    get:
      parameters:
        - name: artifact_type
          description: Type of artifact to fetch
          schema:
            $ref: "#/components/schemas/ArtifactType"
          in: path
          required: true
        - name: id
          description: id of artifact to fetch
          schema:
            $ref: "#/components/schemas/ArtifactID"
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artifact"
              examples:
                ExampleResponse:
                  value:
                    metadata:
                      name: openai-whisper
                      id: 7364518290
                      type: code
                    data:
                      url: https://github.com/openai/whisper
          description: Return the artifact. url is required.
        "400":
          description: "There is missing field(s) in the artifact_type or artifact_id or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
      operationId: ArtifactRetrieve
      summary: Interact with the artifact with this id. (BASELINE)
      description: Return this artifact.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Artifact"
        required: true
      parameters:
        - name: artifact_type
          description: Type of artifact to update
          schema:
            $ref: "#/components/schemas/ArtifactType"
          in: path
          required: true
        - name: id
          description: artifact id
          schema:
            $ref: "#/components/schemas/ArtifactID"
          in: path
          required: true
      responses:
        "200":
          description: Artifact is updated.
        "400":
          description: "There is missing field(s) in the artifact_type or artifact_id or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
      operationId: ArtifactUpdate
      summary: Update this content of the artifact. (BASELINE)
      description: |-
        The name and id must match.

        The artifact source (from artifact_data) will replace the previous contents.
    delete:
      parameters:
        - name: artifact_type
          description: Type of artifact to delete
          schema:
            $ref: "#/components/schemas/ArtifactType"
          in: path
          required: true
        - name: id
          description: artifact id
          schema:
            $ref: "#/components/schemas/ArtifactID"
          in: path
          required: true
      responses:
        "200":
          description: Artifact is deleted.
        "400":
          description: "There is missing field(s) in the artifact_type or artifact_id or invalid"
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
      operationId: ArtifactDelete
      summary: Delete this artifact. (NON-BASELINE)
      description: Delete only the artifact that matches "id". (id is a unique identifier for an artifact)
    parameters:
      - examples:
          ExampleID:
            value: model
        name: artifact_type
        description: Artifact type
        schema:
          $ref: "#/components/schemas/ArtifactType"
        in: path
        required: true
      - examples:
          ExampleID:
            value: 3847247294
        name: id
        description: artifact id
        schema:
          $ref: "#/components/schemas/ArtifactID"
        in: path
        required: true
      - examples:
          ExampleToken:
            value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /artifact/{artifact_type}:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArtifactData"
            examples:
              ExampleArtifactData:
                value:
                  url: https://huggingface.co/google-bert/bert-base-uncased
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artifact"
              examples:
                ExampleArtifactDataResponse:
                  value:
                    metadata:
                      name: bert-base-uncased
                      id: 9078563412
                      type: model
                    data:
                      url: https://huggingface.co/google-bert/bert-base-uncased
          description:
            Success. Check the id in the returned metadata for the official
            ID.
        "400":
          description: There is missing field(s) in the artifact_data or it is formed improperly (must include a single url).
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "409":
          description: Artifact exists already.
        "424":
          description: Artifact is not registered due to the disqualified rating.
      operationId: ArtifactCreate
      summary: Register a new artifact. (BASELINE)
      description: |-
        Register a new artifact by providing a downloadable source url. Artifacts may share a name with existing entries; refer to the description above to see how an id is formed for an artifact.
    parameters:
      - name: artifact_type
        description: Type of artifact being ingested.
        schema:
          $ref: "#/components/schemas/ArtifactType"
        in: path
        required: true
      - name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /artifact/model/{id}/rate:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelRating"
          description:
            Return the rating. Only use this if each metric was computed
            successfully.
        "400":
          description: "There is missing field(s) in the artifact_id or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
        "500":
          description: The artifact rating system encountered an error while computing at least one metric.
      operationId: ModelArtifactRate
      summary: "Get ratings for this model artifact. (BASELINE)"
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/ArtifactID"
        in: path
        required: true
      - name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /artifact/{artifact_type}/{id}/cost:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtifactCost"
              examples:
                ExampleWithoutDependency:
                  value: |
                    {
                      "3847247294": {
                        "total_cost": 412.5
                      }
                    }
                ExampleWithDependency:
                  value: |
                    {
                      "3847247294": {
                        "standalone_cost": 412.5,
                        "total_cost": 1255.0
                      },
                      "4628173590": {
                        "standalone_cost": 280.0,
                        "total_cost": 280.0
                      },
                      "5738291045": {
                        "standalone_cost": 562.5,
                        "total_cost": 562.5
                      }
                    }
          description: Return the total cost of the artifact, and its dependencies
        "400":
          description: "There is missing field(s) in the artifact_type or artifact_id or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
        "500":
          description: The artifact cost calculator encountered an error.
      summary: "Get the cost of an artifact (BASELINE)"
    parameters:
      - name: artifact_type
        schema:
          $ref: "#/components/schemas/ArtifactType"
        in: path
        required: true
      - name: id
        schema:
          $ref: "#/components/schemas/ArtifactID"
        in: path
        required: true
      - name: dependency
        schema:
          type: boolean
          default: false
        in: query
      - name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /authenticate:
    summary: Authenticate this user -- get an access token.
    description: |-
      If your system supports the authentication scheme described in the spec, then:

      1. The obtained token should be provided to the other endpoints via the "X-Authorization" header.
      2. The "Authorization" header is *required* in your system.

      Otherwise, this endpoint should return HTTP 501 "Not implemented", and the "X-Authorization" header should be unused for the other endpoints.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
            examples:
              ExampleRequest:
                value:
                  user:
                    name: ece30861defaultadminuser
                    is_admin: true
                  secret:
                    password: correcthorsebatterystaple123(!__+@**(A'"`;DROP TABLE artifacts;
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
              examples:
                ExampleResponse:
                  value: '"bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"'
          description: Return an AuthenticationToken.
        "400":
          description:
            There is missing field(s) in the AuthenticationRequest or it
            is formed improperly.
        "401":
          description: The user or password is invalid.
        "501":
          description: This system does not support authentication.
      operationId: CreateAuthToken
      summary: (NON-BASELINE)
      description: Create an access token.
  /artifact/byName/{name}:
    get:
      parameters:
        - examples:
            ExampleToken:
              value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          name: X-Authorization
          description: ""
          schema:
            $ref: "#/components/schemas/AuthenticationToken"
          in: header
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtifactMetadata"
              examples:
                AudienceClassifierEntries:
                  value:
                    - name: audience-classifier
                      id: 3847247293
                      type: model
                    - name: audience-classifier
                      id: 3847247294
                      type: model
                    - name: bookcorpus
                      id: 5738291045
                      type: dataset
          description: Return artifact metadata entries that match the provided name.
        "400":
          description: "There is missing field(s) in the artifact_name or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: No such artifact.
      operationId: ArtifactByNameGet
      summary: List artifact metadata for this name. (NON-BASELINE)
      description: Return metadata for each artifact matching this name.
    parameters:
      - examples:
          ExampleName:
            value: audience-classifier
        name: name
        schema:
          $ref: "#/components/schemas/ArtifactName"
        in: path
        required: true
      - examples:
          ExampleToken:
            value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true

  /artifact/{artifact_type}/{id}/audit:
    get:
      parameters:
        - name: artifact_type
          description: Type of artifact to audit
          schema:
            $ref: "#/components/schemas/ArtifactType"
          in: path
          required: true
        - name: id
          description: artifact id
          schema:
            $ref: "#/components/schemas/ArtifactID"
          in: path
          required: true
        - examples:
            ExampleToken:
              value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          name: X-Authorization
          description: ""
          schema:
            $ref: "#/components/schemas/AuthenticationToken"
          in: header
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtifactAuditEntry"
              examples:
                AudienceClassifierAuditTrail:
                  value:
                    - user:
                        name: Lina Torres
                        is_admin: true
                      date: 2024-07-11T14:22:05Z
                      artifact:
                        name: audience-classifier
                        id: 3847247293
                        type: model
                      action: CREATE
                    - user:
                        name: Lina Torres
                        is_admin: true
                      date: 2024-07-11T14:24:18Z
                      artifact:
                        name: audience-classifier
                        id: 3847247293
                        type: model
                      action: DOWNLOAD
                    - user:
                        name: Casey Morgan
                        is_admin: false
                      date: 2024-09-02T01:12:30Z
                      artifact:
                        name: audience-classifier
                        id: 3847247294
                        type: model
                      action: RATE
          description: Return the audit trail for this artifact. (NON-BASELINE)
        "400":
          description: "There is missing field(s) in the artifact_type or artifact_id or it is formed improperly, or is invalid."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
      operationId: ArtifactAuditGet
      summary: Retrieve audit entries for this artifact. (NON-BASELINE)

  /artifact/model/{id}/lineage:
    get:
      parameters:
        - name: id
          description: artifact id
          schema:
            $ref: "#/components/schemas/ArtifactID"
          in: path
          required: true
        - examples:
            ExampleToken:
              value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          name: X-Authorization
          description: ""
          schema:
            $ref: "#/components/schemas/AuthenticationToken"
          in: header
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtifactLineageGraph"
              examples:
                ExampleLineageGraph:
                  value:
                    nodes:
                      - artifact_id: 3847247294
                        name: audience-classifier
                        source: config_json
                      - artifact_id: 5738291045
                        name: bookcorpus
                        source: upstream_dataset
                    edges:
                      - from_node_artifact_id: 5738291045
                        to_node_artifact_id: 3847247294
                        relationship: fine_tuning_dataset
          description: Lineage graph extracted from structured metadata. (BASELINE)
        "400":
          description: "The lineage graph cannot be computed because the artifact metadata is missing or malformed."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: Artifact does not exist.
      operationId: ArtifactLineageGet
      summary: Retrieve the lineage graph for this artifact. (BASELINE)

  /artifact/model/{id}/license-check:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleLicenseCheckRequest"
            examples:
              ExampleSimpleLicenseCheckRequest:
                value:
                  github_url: https://github.com/google-research/bert
        required: true
      parameters:
        - name: id
          description: artifact id
          schema:
            $ref: "#/components/schemas/ArtifactID"
          in: path
          required: true
        - examples:
            ExampleToken:
              value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          name: X-Authorization
          description: ""
          schema:
            $ref: "#/components/schemas/AuthenticationToken"
          in: header
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
              examples:
                ExampleSimpleLicenseCheckResult:
                  value: true
          description: License compatibility analysis produced successfully. (BASELINE)
        "400":
          description: "The license check request is malformed or references an unsupported usage context."
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: The artifact or GitHub project could not be found.
        "502":
          description: External license information could not be retrieved.
      operationId: ArtifactLicenseCheck
      summary: Assess license compatibility for fine-tune and inference usage. (BASELINE)

  /artifact/byRegEx:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArtifactRegEx"
            examples:
              ExampleRegEx:
                value:
                  regex: .*?(audience|bert).*
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtifactMetadata"
              examples:
                ExampleResponse:
                  value:
                    - name: audience-classifier
                      id: 3847247294
                      type: model
                    - name: openai-whisper
                      id: 7364518290
                      type: code
                    - name: bert-base-uncased
                      id: 9078563412
                      type: model
          description: Return a list of artifacts.
        "400":
          description: There is missing field(s) in the artifact_regex or it is formed improperly, or is invalid
        "403":
          description: Authentication failed due to invalid or missing AuthenticationToken.
        "404":
          description: No artifact found under this regex.
      operationId: ArtifactByRegExGet
      summary: Get any artifacts fitting the regular expression (BASELINE).
      description:
        Search for an artifact using regular expression over artifact names
        and READMEs. This is similar to search by name.
    parameters:
      - examples:
          ExampleToken:
            value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        name: X-Authorization
        description: ""
        schema:
          $ref: "#/components/schemas/AuthenticationToken"
        in: header
        required: true
  /tracks:
    get:
      summary: "Get the list of tracks a student has planned to implement in their code"

      responses:
        "200":
          description: Return the list of tracks the student plans to implement
          content:
            application/json:
              schema:
                type: object
                properties:
                  plannedTracks:
                    type: array
                    description: "List of tracks the student plans to implement"
                    items:
                      type: string
                      enum:
                        - "Performance track"
                        - "Access control track"
                        - "High assurance track"
                        - "Other Security track"

        "500":
          description: The system encountered an error while retrieving the student's track information.

components:
  schemas:
    Artifact:
      description: Artifact envelope containing metadata and ingest details.
      required:
        - metadata
        - data
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/ArtifactMetadata"
        data:
          $ref: "#/components/schemas/ArtifactData"

    ArtifactData:
      description: |-
        Source location for ingesting an artifact.

        Provide a single downloadable url pointing to a bundle that contains the artifact assets.
      required:
        - url
      type: object
      properties:
        url:
          description: Artifact source url used during ingest.
          type: string
          format: uri
      example:
        url: https://huggingface.co/openai/whisper-tiny/tree/main

    ArtifactType:
      description: "Artifact category."
      type: string
      enum:
        - model
        - dataset
        - code

    ArtifactID:
      description: "Unique identifier for use with artifact endpoints."
      example: "48472749248"
      type: string
      pattern: '^[a-zA-Z0-9\-]+$'

    ArtifactName:
      description: |-
        Name of an artifact.

        - Names should only use typical "keyboard" characters.
        - The name "*" is reserved. See the `/artifacts` API for its meaning.
      type: string

    ArtifactMetadata:
      description: |-
        The `name` is provided when uploading an artifact.

        The `id` is used as an internal identifier for interacting with existing artifacts and distinguishes artifacts that share a name.
      required:
        - name
        - id
        - type
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ArtifactName"
        id:
          $ref: "#/components/schemas/ArtifactID"
        type:
          $ref: "#/components/schemas/ArtifactType"

    ArtifactQuery:
      description: ""
      required:
        - name
      type: object
      properties:
        name:
          $ref: "#/components/schemas/ArtifactName"
          description: ""
        types:
          description: Optional list of artifact types to filter results.
          type: array
          items:
            $ref: "#/components/schemas/ArtifactType"

    ArtifactAuditEntry:
      description: One entry in an artifact's audit history.
      required:
        - user
        - date
        - artifact
        - action
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
          description: ""
        date:
          format: date-time
          description: Date of activity using ISO-8601 Datetime standard in UTC format.
          type: string
          example: 2023-03-23T23:11:15Z
        artifact:
          $ref: "#/components/schemas/ArtifactMetadata"
          description: ""
        action:
          description: ""
          enum:
            - CREATE
            - UPDATE
            - DOWNLOAD
            - RATE
            - AUDIT
          type: string

    ArtifactCost:
      description: Artifact Cost aggregates the total download size (in MB) required for the artifact, optionally including dependencies.
      type: object
      additionalProperties:
        type: object
        properties:
          standalone_cost:
            type: number
            description: The standalone cost of this artifact excluding dependencies. Required when `dependency = true` in the request.
          total_cost:
            type: number
            description: |
              The total cost of the artifact. When `dependency` is not set, this should return the standalone cost,
              and when it is set, this field should return the sum of the costs of all the dependencies.

              For example:

                Artifact 1 -> Artifact 2 -> Artifact 3, Artifact 4.

                  If dependency = false
                    total_cost = size(artifact_1)
                  If dependency = true
                  total_cost = size(artifact_1 + artifact_2 + artifact_3 + artifact_4)
        required:
          - total_cost

    ArtifactRegEx:
      description: ""
      required:
        - regex
      type: object
      properties:
        regex:
          description:
            A regular expression over artifact names and READMEs that is
            used for searching for an artifact
          type: string

    ArtifactLineageNode:
      description: A single node in an artifact lineage graph.
      required:
        - node
      type: object
      properties:
        artifact_id:
          description: Unique identifier for the node (artifact or external dependency).
          $ref: "#/components/schemas/ArtifactID"
        name:
          description: Human-readable label for the node.
          type: string
          example: audience-classifier
        source:
          description: Provenance for how the node was discovered.
          type: string
          example: config_json
        metadata:
          description: Optional metadata captured for lineage analysis.
          type: object
          example:
            repository_url: https://huggingface.co/parvk11/audience_classifier_model
            sha: 23c9e8adf2

    ArtifactLineageEdge:
      description: Directed relationship between two lineage nodes.
      required:
        - from_node_artifact_id
        - to_node_artifact_id
        - relationship
      type: object
      properties:
        from_node_artifact_id:
          description: Identifier of the upstream node.
          $ref: "#/components/schemas/ArtifactID"
          example: 57382910458
        to_node_artifact_id:
          description: Identifier of the downstream node.
          $ref: "#/components/schemas/ArtifactID"
          example: 38472472949
        relationship:
          description: Qualitative description of the edge.
          type: string
          example: fine_tuning_dataset

    ArtifactLineageGraph:
      description: Complete lineage graph for an artifact.
      required:
        - nodes
        - edges
      type: object
      properties:
        nodes:
          description: Nodes participating in the lineage graph.
          type: array
          items:
            $ref: "#/components/schemas/ArtifactLineageNode"
        edges:
          description: Directed edges describing lineage relationships.
          type: array
          items:
            $ref: "#/components/schemas/ArtifactLineageEdge"

    SimpleLicenseCheckRequest:
      description: Request payload for artifact license compatibility analysis.
      required:
        - github_url
      type: object
      properties:
        github_url:
          description: GitHub repository url to evaluate.
          type: string
          format: uri
          example: https://github.com/google-research/bert

    User:
      description: ""
      required:
        - name
        - is_admin
      type: object
      properties:
        name:
          description: ""
          type: string
          example: Alfalfa
        is_admin:
          description: Is this user an admin?
          type: boolean

    UserAuthenticationInfo:
      description: Authentication info for a user
      required:
        - password
      type: object
      properties:
        password:
          description:
            "Password for a user. Per the spec, this should be a \"strong\"\
            \ password."
          type: string

    ModelRating:
      description: Model rating summary generated by the evaluation service.
      required:
        - name
        - category
        - net_score
        - net_score_latency
        - ramp_up_time
        - ramp_up_time_latency
        - bus_factor
        - bus_factor_latency
        - performance_claims
        - performance_claims_latency
        - license
        - license_latency
        - dataset_and_code_score
        - dataset_and_code_score_latency
        - dataset_quality
        - dataset_quality_latency
        - code_quality
        - code_quality_latency
        - reproducibility
        - reproducibility_latency
        - reviewedness
        - reviewedness_latency
        - tree_score
        - tree_score_latency
        - size_score
        - size_score_latency
      type: object
      properties:
        name:
          description: Human-friendly label for the evaluated model.
          type: string
        category:
          description: Model category assigned during evaluation.
          type: string
        net_score:
          format: double
          description: Overall score synthesizing all metrics.
          type: number
        net_score_latency:
          format: double
          description: Time (seconds) required to compute `net_score`.
          type: number
        ramp_up_time:
          format: double
          description: Ease-of-adoption rating for the model.
          type: number
        ramp_up_time_latency:
          format: double
          description: Time (seconds) required to compute `ramp_up_time`.
          type: number
        bus_factor:
          format: double
          description: Team redundancy score for the upstream project.
          type: number
        bus_factor_latency:
          format: double
          description: Time (seconds) required to compute `bus_factor`.
          type: number
        performance_claims:
          format: double
          description: Alignment between stated and observed performance.
          type: number
        performance_claims_latency:
          format: double
          description: Time (seconds) required to compute `performance_claims`.
          type: number
        license:
          format: double
          description: Licensing suitability score.
          type: number
        license_latency:
          format: double
          description: Time (seconds) required to compute `license`.
          type: number
        dataset_and_code_score:
          format: double
          description: Availability and quality of accompanying datasets and code.
          type: number
        dataset_and_code_score_latency:
          format: double
          description: Time (seconds) required to compute `dataset_and_code_score`.
          type: number
        dataset_quality:
          format: double
          description: Quality rating for associated datasets.
          type: number
        dataset_quality_latency:
          format: double
          description: Time (seconds) required to compute `dataset_quality`.
          type: number
        code_quality:
          format: double
          description: Quality rating for provided code artifacts.
          type: number
        code_quality_latency:
          format: double
          description: Time (seconds) required to compute `code_quality`.
          type: number
        reproducibility:
          format: double
          description: Likelihood that reported results can be reproduced.
          type: number
        reproducibility_latency:
          format: double
          description: Time (seconds) required to compute `reproducibility`.
          type: number
        reviewedness:
          format: double
          description: Measure of peer or community review coverage.
          type: number
        reviewedness_latency:
          format: double
          description: Time (seconds) required to compute `reviewedness`.
          type: number
        tree_score:
          format: double
          description: Supply-chain health score for model dependencies.
          type: number
        tree_score_latency:
          format: double
          description: Time (seconds) required to compute `tree_score`.
          type: number
        size_score:
          description: Size suitability scores for common deployment targets.
          type: object
          required:
            - raspberry_pi
            - jetson_nano
            - desktop_pc
            - aws_server
          properties:
            raspberry_pi:
              format: double
              description: Size score for Raspberry Pi class devices.
              type: number
            jetson_nano:
              format: double
              description: Size score for Jetson Nano deployments.
              type: number
            desktop_pc:
              format: double
              description: Size score for desktop deployments.
              type: number
            aws_server:
              format: double
              description: Size score for cloud server deployments.
              type: number
        size_score_latency:
          description: Time (seconds) required to compute `size_score`.
          format: double
          type: number
    AuthenticationToken:
      description:
        "The spec permits you to use any token format you like. You could,\
        \ for example, look into JSON Web Tokens (\"JWT\", pronounced \"jots\"): https://jwt.io."
      type: string
    AuthenticationRequest:
      description: ""
      required:
        - user
        - secret
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
          description: ""
        secret:
          $ref: "#/components/schemas/UserAuthenticationInfo"
          description: ""
    EnumerateOffset:
      description: Offset in pagination.
      type: string
      example: "1"
    HealthStatus:
      description: Aggregate health classification for monitored systems.
      type: string
      enum:
        - ok
        - degraded
        - critical
        - unknown
    HealthSummaryResponse:
      description: High-level snapshot summarizing registry health and recent activity.
      required:
        - status
        - checked_at
        - window_minutes
      type: object
      properties:
        status:
          $ref: "#/components/schemas/HealthStatus"
        checked_at:
          description: Timestamp when the health snapshot was generated (UTC).
          type: string
          format: date-time
        window_minutes:
          description: Size of the trailing observation window in minutes.
          type: integer
          minimum: 5
        uptime_seconds:
          description: Seconds the registry API has been running.
          type: integer
          minimum: 0
        version:
          description: Running service version or git SHA when available.
          type: string
        request_summary:
          $ref: "#/components/schemas/HealthRequestSummary"
        components:
          description: Rollup of component status ordered by severity.
          type: array
          items:
            $ref: "#/components/schemas/HealthComponentBrief"
        logs:
          description: Quick links or descriptors for recent log files.
          type: array
          items:
            $ref: "#/components/schemas/HealthLogReference"
    HealthRequestSummary:
      description: Request activity observed within the health window.
      required:
        - window_start
        - window_end
      type: object
      properties:
        window_start:
          description: Beginning of the aggregation window (UTC).
          type: string
          format: date-time
        window_end:
          description: End of the aggregation window (UTC).
          type: string
          format: date-time
        total_requests:
          description: Number of API requests served during the window.
          type: integer
          minimum: 0
        per_route:
          description: Request counts grouped by API route.
          type: object
          additionalProperties:
            type: integer
            minimum: 0
        per_artifact_type:
          description: Request counts grouped by artifact type (model/dataset/code).
          type: object
          additionalProperties:
            type: integer
            minimum: 0
        unique_clients:
          description: Distinct API clients observed in the window.
          type: integer
          minimum: 0
    HealthComponentBrief:
      description: Lightweight component-level status summary.
      required:
        - id
        - status
      type: object
      properties:
        id:
          description: Stable identifier for the component (e.g., ingest-worker, metrics).
          type: string
        display_name:
          description: Human readable component name.
          type: string
        status:
          $ref: "#/components/schemas/HealthStatus"
        issue_count:
          description: Number of outstanding issues contributing to the status.
          type: integer
          minimum: 0
        last_event_at:
          description: Last significant event timestamp for the component.
          type: string
          format: date-time
    HealthComponentCollection:
      description: Detailed health diagnostics broken down per component.
      required:
        - components
        - generated_at
      type: object
      properties:
        components:
          type: array
          items:
            $ref: "#/components/schemas/HealthComponentDetail"
        generated_at:
          description: Timestamp when the component report was created (UTC).
          type: string
          format: date-time
        window_minutes:
          description: Observation window applied to the component metrics.
          type: integer
          minimum: 5
    HealthComponentDetail:
      description: Detailed status, metrics, and log references for a component.
      required:
        - id
        - status
        - observed_at
      type: object
      properties:
        id:
          description: Stable identifier for the component.
          type: string
        display_name:
          description: Human readable component name.
          type: string
        status:
          $ref: "#/components/schemas/HealthStatus"
        observed_at:
          description: Timestamp when data for this component was last collected (UTC).
          type: string
          format: date-time
        description:
          description: Overview of the component's responsibility.
          type: string
        metrics:
          $ref: "#/components/schemas/HealthMetricMap"
        issues:
          type: array
          items:
            $ref: "#/components/schemas/HealthIssue"
        timeline:
          type: array
          items:
            $ref: "#/components/schemas/HealthTimelineEntry"
        logs:
          type: array
          items:
            $ref: "#/components/schemas/HealthLogReference"
    HealthMetricMap:
      description: Arbitrary metric key/value pairs describing component performance.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/HealthMetricValue"
    HealthMetricValue:
      description: Flexible representation for metric values.
      oneOf:
        - type: integer
        - type: number
        - type: string
        - type: boolean
    HealthTimelineEntry:
      description: Time-series datapoint for a component metric.
      required:
        - bucket
        - value
      type: object
      properties:
        bucket:
          description: Start timestamp of the sampled bucket (UTC).
          type: string
          format: date-time
        value:
          description: Observed value for the bucket (e.g., requests per minute).
          type: number
        unit:
          description: Unit associated with the metric value.
          type: string
    HealthIssue:
      description: Outstanding issue or alert impacting a component.
      required:
        - code
        - severity
        - summary
      type: object
      properties:
        code:
          description: Machine readable issue identifier.
          type: string
        severity:
          description: Issue severity.
          type: string
          enum:
            - info
            - warning
            - error
        summary:
          description: Short description of the issue.
          type: string
        details:
          description: Extended diagnostic detail and suggested remediation.
          type: string
    HealthLogReference:
      description: Link or descriptor for logs relevant to a health component.
      required:
        - label
        - url
      type: object
      properties:
        label:
          description: Human readable log descriptor (e.g., "Ingest Worker 1").
          type: string
        url:
          description: Direct link to download or tail the referenced log.
          type: string
          format: uri
        tail_available:
          description: Indicates whether streaming tail access is supported.
          type: boolean
        last_updated_at:
          description: Timestamp of the latest log entry available for this reference.
          type: string
          format: date-time
